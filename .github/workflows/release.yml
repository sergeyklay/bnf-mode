# Copyright (C) 2019-2024 Free Software Foundation, Inc.
#
# License
#
# This file is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 3
# of the License, or (at your option) any later version.
#
# This file is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this file.  If not, see <https://www.gnu.org/licenses/>.

name: release

on:
  push:
    tags:
      - '*'

jobs:
  build:
    name: Upload Release Asset
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Setup GNU Emacs
        uses: purcell/setup-emacs@master
        with:
          version: 28.2

      - uses: actions/cache@v3
        id: cache-cask-packages
        with:
          path: .cask
          key: cask-packages-${{ matrix.emacs_version }}-${{ hashFiles('**/Cask') }}

      - uses: actions/cache@v3
        id: cache-cask-executable
        with:
          path: ~/.cask
          key: cask-executable-${{ matrix.emacs_version }}

      - name: Setup Cask
        uses: cask/setup-cask@master
        if: steps.cache-cask-executable.outputs.cache-hit != 'true'
        with:
          version: snapshot

      - name: Set Environment Variables
        run: |
          echo "$HOME/.cask/bin" >> $GITHUB_PATH
          echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          echo DEBIAN_FRONTEND=noninteractive >> $GITHUB_ENV

      - name: Common settings
        run: |
          git config --global user.name "Serghei Iakovlev"
          git config --global user.email egrep@protonmail.ch

      - name: Setup Prerequisites
        run: |
          # I don't need this at all. However I noticed
          # that builds often fails because Microsoft
          # servers are unstable or even offline.
          sudo rm -f /etc/apt/sources.list.d/dotnetdev.list
          sudo rm -f /etc/apt/sources.list.d/azure*.list

          sudo apt-get update --quiet --yes 1>/dev/null
          sudo apt-get install --no-install-recommends -q -y texinfo pandoc

          # _repo=https://github.com/jgm/pandoc
          # wget -q "$_repo/releases/download/2.19.2/pandoc-2.19.2-1-amd64.deb"
          # sudo dpkg -i pandoc-2.19.2-1-amd64.deb

      - name: Initialize the Project
        if: steps.cache-cask-packages.outputs.cache-hit != 'true'
        run: make init

      - name: Build Package
        run: make package

      - name: Minimal Package Test
        run: |
          make install
          head "$HOME/.emacs.d/elpa/bnf-mode-*/bnf-mode.el" | grep -q "$VERSION"

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: $VERSION
          draft: false
          prerelease: false

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: "bnf-mode-${VERSION}.tar"
          asset_name: "bnf-mode-${VERSION}.tar"
          asset_content_type: application/x-tar
